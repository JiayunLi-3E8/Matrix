//@Birth:created by JiayunLi on 2021-06-16
//@Content:矩阵库，定义矩阵类型及其运算
//@Version:1.0.0
#ifndef _MATRIX_
#define _MATRIX_

#include <iostream>

namespace JoY
{
	// 分数类型
	class Fraction;

	// 定义矩阵的m行和n列
	struct MN
	{
		int m, n;
		bool operator==(const MN &mn);
		bool operator!=(const MN &mn);
	};

	// 矩阵类
	class Matrix
	{
	public:
		// m：行数，n：列数
		explicit Matrix(int m = 3, int n = 3);
		Matrix(const Matrix &o);
		~Matrix();
		// 行列数
		const MN &getMN() const;
		// 矩阵的转置
		Matrix getAT();
		// 阶梯型矩阵
		Matrix getLadder();
		// 矩阵的行最简型
		Matrix getSimplestLine();
		// 矩阵的秩
		int r();
		const Matrix &operator=(const Matrix &a);
		Matrix operator+(Matrix &a);
		Matrix operator-(Matrix &a);
		void operator+=(Matrix &a);
		void operator-=(Matrix &a);
		Matrix operator*(const Matrix &a);
		Matrix operator/(const Fraction &a);
		Matrix operator*(const Fraction &a);
		friend Matrix operator*(const Fraction &a, const Matrix &A);
		friend std::istream &operator>>(std::istream &input, Matrix &a);
		friend std::ostream &operator<<(std::ostream &output, Matrix a);

	protected:
		// 行列数
		MN mn;
		// 矩阵单元的二维数组指针
		Fraction **A;
		// 根据行列数动态构造数组
		void New();
		// 释放数组内存
		void Del();
		// 重新构造m行n列的矩阵
		void Renew(int m = 3, int n = 3);
	};

	// 方阵类
	class SquareMatrix : public Matrix
	{
	public:
		// n：构造方阵的阶数
		explicit SquareMatrix(int n = 3);
		SquareMatrix(Matrix src);
		const Matrix &operator=(const Matrix &a);
		// 方阵的行列式结果
		Fraction getDeterminant();
		// 对应index(从0开始)位置的余子阵
		SquareMatrix getComplementarySubmatrix(int mIndex, int nIndex);
		// 余子式
		Fraction getMinor(int mIndex, int nIndex);
		// 代数余子式
		Fraction getCofactor(int mIndex, int nIndex);
		// 伴随矩阵
		SquareMatrix getAdjoint();
		// 逆矩阵
		SquareMatrix getInverse();
		friend std::istream &operator>>(std::istream &input, SquareMatrix &a);
	};
}

#endif