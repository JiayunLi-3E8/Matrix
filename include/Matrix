#ifndef _MATRIX_
#define _MATRIX_

#include <iostream>

namespace JoY
{
	class Fraction;

	struct MN
	{
		int m, n;
		bool operator==(const MN &mn);
		bool operator!=(const MN &mn);
	};

	class Matrix
	{
	protected:
		MN mn;
		Fraction **A;
		void New();
		void Del();
		void Renew(int m = 3, int n = 3);

	public:
		explicit Matrix(int m = 3, int n = 3);
		Matrix(const Matrix &o);
		~Matrix();
		const MN &getMN() const;
		Matrix getAT();
		Matrix getLadder();
		Matrix getSimplestLine();
		int r();
		const Matrix &operator=(const Matrix &a);
		Matrix operator+(Matrix &a);
		Matrix operator-(Matrix &a);
		void operator+=(Matrix &a);
		void operator-=(Matrix &a);
		Matrix operator*(const Matrix &a);
		Matrix operator/(const Fraction &a);
		Matrix operator*(const Fraction &a);
		friend Matrix operator*(const Fraction &a, const Matrix &A);
		friend std::istream &operator>>(std::istream &input, Matrix &a);
		friend std::ostream &operator<<(std::ostream &output, Matrix a);
	};

	class SquareMatrix : public Matrix
	{
	public:
		explicit SquareMatrix(int n = 3);
		SquareMatrix(Matrix src);
		const Matrix &operator=(const Matrix &a);
		Fraction getDeterminant();
		SquareMatrix getComplementarySubmatrix(int mIndex, int nIndex);
		Fraction getMinor(int mIndex, int nIndex);
		Fraction getCofactor(int mIndex, int nIndex);
		SquareMatrix getAdjoint();
		SquareMatrix getInverse();
		friend std::istream &operator>>(std::istream &input, SquareMatrix &a);
	};
}

#endif